/**
 * This java file contains a class which implements
 * ActionListener interface and has a method action performed
 * to handle Button click event generated by an object 
 * of class GuiScripterTbleToDlm
 */
package sasco;
import java.awt.event.*;
import javax.swing.JOptionPane;
import java.util.StringTokenizer.*;
import java.io.*;
import java.util.*;

/**
 * This clas has a method which handles the event generated by
 * GuiScripterTbleToDlm.
 * @author Pukit Saxena
 * @version 1.0
 * @Date 18-Jun-07
 *
 */
class GuiScripterTbleToDlmEvntHandler implements ActionListener {

	GuiScripterTbleToDlm objGuiScripterTbleToDlm;
	StringBuffer srtBufCode ;
	String strSchema;
	String strTableName;
	String strTableDml;
	ArrayList listTokenTbleToDlm ;
	FileWriter writerTbleToDlm;
	FileReader readerTbleToDlm;
public	StringBuffer sb;
public	StringBuffer sbFieldName;
public  String dmlFormatTbelToDlm;
public  String  fieldNames;

/*
	 * This is constructor of the class toinitialse
	 * the object state
	 */
	public 	GuiScripterTbleToDlmEvntHandler(
		GuiScripterTbleToDlm objGuiScripterTbleToDlm ){
	
  this.objGuiScripterTbleToDlm =objGuiScripterTbleToDlm;

     srtBufCode = new StringBuffer();
      listTokenTbleToDlm = new ArrayList();
	
      JOptionPane.showMessageDialog ( objGuiScripterTbleToDlm,new 
		 	  String("Enter DML in Sasco format" +"\n"+
		 	  		"for exapmle" +"\n"+
		 	  		"string(1)     goldcard_ind;"+"\n"+
"string(1)     par_non_par_ind;"+"\n"+
"decimal(20)   provider_id; "));  


	
	}

public void actionPerformed(ActionEvent ae){
	
//	to recognise who created event
	 String arg=(String)ae.getActionCommand();
 //event handled 
	 if(arg.equals("Generate Code"))
	 {
		
		 
		   String strToken;
		//creating code for connection to database
		 
		 strSchema = objGuiScripterTbleToDlm.txtSchema.getText();
		 strTableName = 
			 objGuiScripterTbleToDlm.srcTableName.getText();
		 strTableDml = 
	    	 objGuiScripterTbleToDlm.txtAreaDmlAif.getText();
		//removing extra lines
		 String strTableDmlTrim =strTableDml.trim();
		 
		 if(strSchema.equals("")||strTableName.equals("")||
				 strTableDml.equals(""))
		 {
			 JOptionPane.showMessageDialog ( objGuiScripterTbleToDlm,new 
	            	 String("enter all values dml/table schema/table name "));  
	    
		 }
		 else 
		 {
			// System.out.println("else being");
		  try {
		//writing dml to temporary file
		FileWriter writerTbleToDlm = new FileWriter("temp1.txt");
		//writerTbleToDlm.write(strTableDml);
		writerTbleToDlm.write(strTableDmlTrim);
		writerTbleToDlm.close();
		
		//reading from temporary file
				
		FileReader readerTbleToDlm  = new FileReader("temp1.txt");
		BufferedReader br =new BufferedReader(readerTbleToDlm);
		String strTbleToDlm =" ";
	     sb = new StringBuffer();
		sbFieldName  = new  StringBuffer();		
						
				
				//reading file
				while((strTbleToDlm = br.readLine())!=null){
				//scanning for tokens 
		 java.util.StringTokenizer scanTbleToDlm =
			new java.util.StringTokenizer(strTbleToDlm," \t+()\t+;\n");
				    
			    //scanning started
				    while(scanTbleToDlm.hasMoreTokens())
				     {   
		           	String trimmerTbleToDlm =  scanTbleToDlm.nextToken();
				    //removing any white spaces
		           	
		           	trimmerTbleToDlm =trimmerTbleToDlm.trim();
		 		   listTokenTbleToDlm.add(trimmerTbleToDlm); 
					  }
				 
				
				 
				    String   strTokenTbleToDlm = listTokenTbleToDlm.get(0).toString();
				    String checkTokenTblToDlm=strTokenTbleToDlm.trim(); 
				   
				   String checkTbleToDlm="string";
				  
				   if(checkTokenTblToDlm.equalsIgnoreCase(checkTbleToDlm))
				     {
				         
				      sb.append(listTokenTbleToDlm.get(2)+"  :$"+listTokenTbleToDlm.get(1)+".");
				       sb.append("\n");
				       sbFieldName.append("\t\t\t"+listTokenTbleToDlm.get(2)+",");
				       sbFieldName.append("\n");
				     }
				   else {
				     sb.append(listTokenTbleToDlm.get(2)+"  :"+listTokenTbleToDlm.get(1)+".");
				     sb.append("\n");
				     sbFieldName.append("\t\t\t"+listTokenTbleToDlm.get(2)+",");
				       sbFieldName.append("\n"); 
				   
				   }  
				   listTokenTbleToDlm.clear();   
				  }
		 dmlFormatTbelToDlm =sb.toString();
	     fieldNames =sbFieldName.toString();  
  		//System.out.println(dmlFormatTbelToDlm);
  		//System.out.println(fieldNames);
	     //closing files
		readerTbleToDlm.close();
		  }catch(Exception e)
		  {
			  
			  JOptionPane.showMessageDialog ( objGuiScripterTbleToDlm,new 
		            	 String("Dml not in sasco format "));    
			  
		  }	
		  File f1 = new File("temp1.txt");
		    boolean success = f1.delete(); 
		   String con ="libname   "+strSchema+
		 "    db2  database=     user=      password=     schema=" +strSchema+";";
		 
		 String comntCon ="/**Connecting to database:Enter values*/";
		 
		 srtBufCode.append(con);
		 srtBufCode.append("\n");
		 srtBufCode.append(comntCon);
		 srtBufCode.append("\n");
		 
		//creating  proc sql;
		 String strProcTbleToDlm = "proc sql ;";
		srtBufCode.append(strProcTbleToDlm);
		 srtBufCode.append("\n");
		 
		 //creating expected output table
		 String strCreate = "Create table  "+ strTableName+"_expectedOutput as (";
		 
	    srtBufCode.append(strCreate);
	   srtBufCode.append("\n"); 
	   srtBufCode.append("select");
	    srtBufCode.append("\n");
	   //creating list of  field names
	    srtBufCode.append(fieldNames);
	    srtBufCode.append("\n");
	     
	   //ending proc sql statement
	    String endSqlTbleToDlm =" from "+strSchema+"."+strTableName+");";
	    
	    srtBufCode.append(endSqlTbleToDlm);
	    srtBufCode.append("\n\n");
	    srtBufCode.append("quit;");
	    srtBufCode.append("\n");
	    
	    //creating output code
	    //creating data code
	    String outPut = "filename summary";
	    String outPutCmnt ="/*enter file path*/";
	    String dataTbleToDlm ="data "+strTableName+"_actual_output;";
	    String dataInputTbleToDlm ="infile  summary  dlm='|'  dsd;"+"\n"+"input"+"\n";
	    
	    srtBufCode.append(outPut);
	   srtBufCode.append("\n");
	   srtBufCode.append(outPutCmnt);
	   srtBufCode.append("\n");
	   srtBufCode.append(dataTbleToDlm);
	    srtBufCode.append("\n");
	    srtBufCode.append("\n");
	    srtBufCode.append(dataInputTbleToDlm);
	    srtBufCode.append(dmlFormatTbelToDlm);
	    srtBufCode.append("\n"+";");
	    srtBufCode.append("\n");
	    srtBufCode.append("run;");
	    srtBufCode.append("\n");
	    srtBufCode.append("\n");
	    //writing proc sql
	    String fileTbleToDlm ="create  table "+strTableName+"_actual_file as (";
	    String fileSqlTbleToDlm ="select  *  from "+strTableName+"_actual_output );";
	    
	    srtBufCode.append(fileTbleToDlm);
	    srtBufCode.append("\n");
	    srtBufCode.append(fileSqlTbleToDlm);
	    srtBufCode.append("\n");
	    srtBufCode.append("\n");
	    srtBufCode.append("quit;");
	    srtBufCode.append("\n");
	    //proc priting
	    
	    String procPrintTbleToDlmAif ="proc print  data= "+strTableName+"_actual_file ;"; 
	    String procPrintTbleToDlmTble ="proc print  data= "+strTableName+"_expectedOutput ;";
	    srtBufCode.append(procPrintTbleToDlmAif);
	    srtBufCode.append("\n");
	    srtBufCode.append(procPrintTbleToDlmTble);
	    srtBufCode.append("\n");
	   String codeTbleToDlm =srtBufCode.toString();
		//System.out.println(codeTbleToDlm );
	 
		
		objGuiScripterTbleToDlm.setVisible(false);
		GuiSasco objGuiSasco = new GuiSasco ("Java-SAS Editor");
		objGuiSasco.txtAreaSasEditor.setText(codeTbleToDlm);
		 }
 }


}
}
	    
		