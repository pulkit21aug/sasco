/**
 * This java file consists a class which handles the event 
 * genertaed by the object for the class GuiScripterDlmToDlm
 */
package sasco;

import java.awt.event.*;
import javax.swing.JOptionPane;
import java.util.StringTokenizer.*;
import java.io.*;
import java.util.*;

/**
 * This class handles the event genrated by the object 
 * of class GuiScripterDlmToDlm.It implements 
 * the ActionListener interface
 * @author Pulkit Saxena
 * @version 1.0
 * Date 1-Jul-2007
 *
 */
public class GuiScripterDlmToDlmEvntHandler implements ActionListener {
	
	GuiScripterDlmToDlm objGuiScripterDlmToDlm;
	StringBuffer srtBufCode ;
	String strSrcDml;
	String strTrgtDml;
	ArrayList listTokenDlmToDlmSrc ;
	ArrayList listTokenDlmToDlmTrgt;
	FileWriter writerDlmToDlm;
	FileReader readerDlmToDlm;
	StringBuffer sb;
	StringBuffer sb1;
    String  dmlFormatDlmToDlmSrc;
    String dmlFormatDlmToDlmTrg;
    String strDlmToDlm ;
    String strDlmToDlm1;
    String checkDlmToDlm;
    /**
	 * This constructor intialises the varaibles
	 * @param objGuiScripterDlmToDlm
	 */
	public GuiScripterDlmToDlmEvntHandler(GuiScripterDlmToDlm objGuiScripterDlmToDlm) {
		this.objGuiScripterDlmToDlm =objGuiScripterDlmToDlm;
		 strDlmToDlm =" ";
		 listTokenDlmToDlmSrc = new ArrayList();
		 listTokenDlmToDlmTrgt = new ArrayList();
		 checkDlmToDlm ="string"; 
		  JOptionPane.showMessageDialog ( objGuiScripterDlmToDlm,new 
			 	  String("Enter DML in Sasco format" +"\n"+
			 	  		"for exapmle" +"\n"+
			 	  		"string(1)     goldcard_ind;"+"\n"+
	"string(1)     par_non_par_ind;"+"\n"+
	"decimal(20)   provider_id; "));  

	
	
	}

	/**
	 * This method handles the event generated by the objetc 
	 * of GuiScripterDlmToDlm and generates the code for the
	 * case when data is moving from Delimited AIF to 
	 * Delimited AIF
	 * @param ae
	 */
	public void actionPerformed(ActionEvent ae){
		String arg=(String)ae.getActionCommand();
		 //to recognise who created the event
		 if(arg.equals("Generate Code")){
			 
		strSrcDml = objGuiScripterDlmToDlm.txtAreaSrcDml.getText();
		strTrgtDml = objGuiScripterDlmToDlm.txtAreaTrgDml.getText();
		
		//removing exrta lines 
		String strSrcDmlTrim =strSrcDml.trim();
		String strTrgtDmlTrim =strTrgtDml.trim();
		
		if(strSrcDml.equals("")||strTrgtDml.equals("")){
		 
			JOptionPane.showMessageDialog (objGuiScripterDlmToDlm,new 
	            	 String("enter  DML of source/target AIF "));  
		
	     	   }
			 
		else{
			
            try{
        	  

        	  //writing dml to temporary file
          writerDlmToDlm  = new FileWriter("temp1.txt");
          //writerDlmToDlm.write(strSrcDml);
          writerDlmToDlm.write(strSrcDmlTrim);
          writerDlmToDlm.close();  
     
          //reading from temporary file
  		
          readerDlmToDlm = new FileReader("temp1.txt");
			BufferedReader br =new BufferedReader(readerDlmToDlm);
			
			//for reading from file
          
            

			
			  
			
			//for generating SAS format dml code
			sb = new StringBuffer();
			//reading file
			while((strDlmToDlm = br.readLine())!=null){
		

		//scanning for tokens 
		 java.util.StringTokenizer scanDlmToDlm =
		new java.util.StringTokenizer(strDlmToDlm," \t+()\t+;\n");	
    
		 //scanning started
		  while(scanDlmToDlm.hasMoreTokens())
		     {   
	     	String trimmerDlmToDlm =  scanDlmToDlm.nextToken();
		    //removing any white spaces
	     	
	     	trimmerDlmToDlm =trimmerDlmToDlm.trim();
	     	listTokenDlmToDlmSrc.add(trimmerDlmToDlm); 
			  }		
			
			
		 String   strTokenDlmToDlm = listTokenDlmToDlmSrc.get(0).toString();
		  String checkTokenDlmToDlm=strTokenDlmToDlm.trim(); 
		   
		     
		   if(checkTokenDlmToDlm.equalsIgnoreCase(checkDlmToDlm)){
				
			   sb.append(listTokenDlmToDlmSrc.get(2)+"  :$"+listTokenDlmToDlmSrc.get(1)+".");
		       sb.append("\n");
		       
		  
		   }
		   else {
			   
			     sb.append(listTokenDlmToDlmSrc.get(2)+"  :"+listTokenDlmToDlmSrc.get(1)+".");
			     sb.append("\n");
			   
		   
	    	   }
		   listTokenDlmToDlmSrc.clear();   
	

	   }
          
          
            //SAS format dml code genertaed for source AIF
			dmlFormatDlmToDlmSrc =sb.toString();
		    
	  		
		     //closing files
		     readerDlmToDlm.close();         
          
		  //generating SAS format DMl code for target   
		    
		 //writing target dml to a temporary file
		     writerDlmToDlm = new FileWriter("temp2.txt");
		     //writerDlmToDlm.write(strTrgtDml);
		     writerDlmToDlm.write(strTrgtDmlTrim);
		     writerDlmToDlm.close();
		     
		 //reading from the file 
		     readerDlmToDlm = new  FileReader("temp2.txt");
		     BufferedReader br1 =new BufferedReader(readerDlmToDlm);

		     // for reading from file
		String	 strDlmToDlm1 =" ";    
			
			//for generating SAS format dml code
			sb1= new StringBuffer();
			//reading file   

			//			reading file
			while((strDlmToDlm1 = br1.readLine())!=null){

				//scanning for tokens 
				 java.util.StringTokenizer scanDlmToDlm1 =
				new java.util.StringTokenizer(strDlmToDlm1," \t+()\t+;\n");	
		    
				 //scanning started
				  while(scanDlmToDlm1.hasMoreTokens())
				     {   
			     	String trimmerDlmToDlm1 =  scanDlmToDlm1.nextToken();
				    //removing any white spaces
			     	
			     	trimmerDlmToDlm1 =trimmerDlmToDlm1.trim();
			     	listTokenDlmToDlmTrgt.add(trimmerDlmToDlm1); 
				  }		
				  String   strTokenDlmToDlm1 = listTokenDlmToDlmTrgt.get(0).toString();
				  String checkTokenDlmToDlm1=strTokenDlmToDlm1.trim(); 
				   
				  if(checkTokenDlmToDlm1.equalsIgnoreCase(checkDlmToDlm)){
						
					   sb1.append(listTokenDlmToDlmTrgt.get(2)+"  :$"+listTokenDlmToDlmTrgt.get(1)+".");
				       sb1.append("\n");
				       
				  
				   }
				   else {
					   
					     sb1.append(listTokenDlmToDlmTrgt.get(2)+"  :"+listTokenDlmToDlmTrgt.get(1)+".");
					     sb1.append("\n");
					   
				   
			    	   }
				   listTokenDlmToDlmTrgt.clear();   
			}
        
//			SAS format dml code genertaed for source AIF
			dmlFormatDlmToDlmTrg =sb1.toString();
		   
	  		
		     //closing files
		     readerDlmToDlm.close();  
			
            
      }catch(Exception e){
        	  JOptionPane.showMessageDialog (objGuiScripterDlmToDlm,new 
		            	 String("Dml not in sasco format "));     
          
                     }
   
      File f1 = new File("temp1.txt");
	    boolean success = f1.delete(); 
	    File f2 = new File("temp2.txt");
	    boolean success1 = f2.delete();
      
      //generating SAS code 
      
      srtBufCode = new StringBuffer();
      
      srtBufCode.append("\n");
      
//    creating expected output code data moving from source AIF
		
      //creating data code
		 String outPut = "filename summary";
		    String outPutCmnt ="/*enter file path*/";
		    String dataDlmToDlm ="data  "+"_expected_output;";
		    String dataInputDlmToDlm ="infile  summary  dlm='|'  dsd;"+"\n"+"input"+"\n";
		    
		    srtBufCode.append(outPut);
		    srtBufCode.append("\n");
		    srtBufCode.append(outPutCmnt);
		    srtBufCode.append("\n");
		    srtBufCode.append(dataDlmToDlm);
		    srtBufCode.append("\n");
		    srtBufCode.append("\n");
		    srtBufCode.append(dataInputDlmToDlm);
		    srtBufCode.append(dmlFormatDlmToDlmSrc);
		    srtBufCode.append("\n;\n");
		    srtBufCode.append("run;");
		    srtBufCode.append("\n");
		    srtBufCode.append("\n"); 
	  
		//writing proc sql for epected output
		    

		    //writing proc sql
		    String fileDlmToDlm ="create  table  "+"\t"+"_expected_table as (";
		    String fileSqlDlmToDlm ="select  *  from "+"\t"+"_expected_output );";
		    
		    srtBufCode.append(fileDlmToDlm);
		    srtBufCode.append("\n");
		    srtBufCode.append(fileSqlDlmToDlm);
		    srtBufCode.append("\n");
		    srtBufCode.append("\n"); 
		   
		  //generating code for actual output 
		    
//		  creating data code
			 String outPut1 = "filename summary1";
			    String outPutCmnt1 ="/*enter file path*/";
			    String dataDlmToDlm1 ="data  "+"_actual_output;";
			    String dataInputDlmToDlm1 ="infile  summary1  dlm='|'  dsd;"+"\n"+"input"+"\n";
			    
			    srtBufCode.append(outPut1);
			    srtBufCode.append("\n");
			    srtBufCode.append(outPutCmnt1);
			    srtBufCode.append("\n");
			    srtBufCode.append(dataDlmToDlm1);
			    srtBufCode.append("\n");
			    srtBufCode.append("\n");
			    srtBufCode.append(dataInputDlmToDlm1);
			    srtBufCode.append(dmlFormatDlmToDlmTrg);
			    srtBufCode.append("\n;\n");
			    srtBufCode.append("run;");
			    srtBufCode.append("\n");
			    srtBufCode.append("\n"); 

			    // writing proc sql for actual output
			    

			    // writing proc sql
			    String fileDlmToDlm1 ="create  table "+"\t"+"_actual_table as (";
			    String fileSqlDlmToDlm1 ="select  *  from "+"\t"+"_actual_output );";
			    
			    srtBufCode.append(fileDlmToDlm1);
			    srtBufCode.append("\n");
			    srtBufCode.append(fileSqlDlmToDlm1);
			    srtBufCode.append("\n");
			    srtBufCode.append("\n"); 
			   

			    //proc priting
			    
			    String procPrintDlmAifToDlm ="proc print  data= "+"_expected_table ;"; 
			    String procPrintDlmAifToDlm1 ="proc print  data= "+"_actual_table ;"; 
			    
			    srtBufCode.append(procPrintDlmAifToDlm);
			    srtBufCode.append("\n");
			    srtBufCode.append(procPrintDlmAifToDlm1);
			    srtBufCode.append("\n");   

			    String codeDlmToDlm =srtBufCode.toString();
				//System.out.println(codeTbleToDlm );
			 
				
			    objGuiScripterDlmToDlm.setVisible(false);
				GuiSasco objGuiSasco = new GuiSasco ("Java-SAS Editor");
				objGuiSasco.txtAreaSasEditor.setText(codeDlmToDlm);
		}		
	

 }

 
		 

 }

}


