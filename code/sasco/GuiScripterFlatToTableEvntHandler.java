/**
 * This java file consists a class which handles the event 
 * generated by the  onject of class GuiScripterFlatToTable
 */
package sasco;
import java.awt.event.*;
import javax.swing.JOptionPane;
import java.util.StringTokenizer.*;
import java.io.*;
import java.util.*;
/**
 * This class handles the event generate by the object of clas
 * GuiScripterFlatToTable .It implements ActionListener interface
 * @author Pulkit Saxena
 * @version 1.0
 * Date :-15-Jul-2007
 *
 */
public class GuiScripterFlatToTableEvntHandler implements ActionListener  {


	GuiScripterFlatToTable objGuiScripterFlatToTable;
	StringBuffer srtBufCode ;
	String strSchema;
	String strTableName;
	String strTableDml;
	ArrayList listTokenFlatToTable ;
	FileWriter writerFlatToTable;
	FileReader readerFlatToTable;
	StringBuffer sb;
	StringBuffer sbFieldName;
        String  dmlFormatFlatToTable;
       String  fieldNames;

/**
 * This is constructor for the class and
 *  initiales the variables.
 * @param objGuiScripterFlatToTable
 */

public GuiScripterFlatToTableEvntHandler(GuiScripterFlatToTable objGuiScripterFlatToTable){
	this.objGuiScripterFlatToTable=objGuiScripterFlatToTable;
  	srtBufCode = new StringBuffer();
  	listTokenFlatToTable = new ArrayList();	

  	JOptionPane.showMessageDialog ( objGuiScripterFlatToTable,new 
		 	  String("Enter DML in Sasco format" +"\n"+
		 	  		"for exapmle" +"\n"+
		 	  		"string(1)     goldcard_ind;"+"\n"+
"string(1)     par_non_par_ind;"+"\n"+
"decimal(20)   provider_id; "));  


}

/**
 * This method handles the event and genertaes the code
 * @param ae the oject for ActionEvent
 */
public void actionPerformed(ActionEvent ae){
	 String arg=(String)ae.getActionCommand();
	 //to recognise who created the event
	 if(arg.equals("Generate Code")){
		 int start=1;  	 
	 String strToken;
	//creating code for connection to database
		   
	 strSchema = objGuiScripterFlatToTable.txtTrgtSchema.getText();
	 strTableName = 
		 objGuiScripterFlatToTable.trgtTableName.getText();
	 
	 strTableDml = 
		 objGuiScripterFlatToTable.txtAreaSrcDmlAif.getText();
	 
	 //removing extra lines
	 String strTableDmlTrim =strTableDml.trim();
	 if(strSchema.equals("")||strTableName.equals("")||
			 strTableDml.equals(""))
	 {
		 JOptionPane.showMessageDialog (objGuiScripterFlatToTable,new 
            	 String("enter all values dml/table schema/table name "));  
    
	 }
	 else {
		
		 try{
			
         // writing dml to temporary file
		    writerFlatToTable = new FileWriter("temp1.txt");
		  //  writerFlatToTable.write(strTableDml);
		    writerFlatToTable.write(strTableDmlTrim);
		    writerFlatToTable.close(); 
			
       //reading from temporary file
		
		    readerFlatToTable = new FileReader("temp1.txt");
			BufferedReader br =new BufferedReader(readerFlatToTable);
			
			//for reading from file
			String strTableToFlat =" ";    
			
			//for generating SAS format dml code
			sb = new StringBuffer();
			
			//for geeratig fields name
			sbFieldName  = new  StringBuffer();
           //reading file
			while((strTableToFlat = br.readLine())!=null){
				
			
	//scanning for tokens 
	  java.util.StringTokenizer scanFlatToFlat =
		new java.util.StringTokenizer(strTableToFlat," \t+()\t+;\n");	
//	scanning started
	    while(scanFlatToFlat.hasMoreTokens())
	     {   
     	String trimmerFlatToTable =  scanFlatToFlat.nextToken();
	    //removing any white spaces
     	
     	trimmerFlatToTable =trimmerFlatToTable.trim();
	   listTokenFlatToTable.add(trimmerFlatToTable); 
		  }
	 	
	    String   strTokenFlatToTable = listTokenFlatToTable.get(0).toString();
	    String checkTokenFlatToTable=strTokenFlatToTable.trim(); 
	   
	   String checkFlatToTable ="string";    
	
	   if(checkTokenFlatToTable.equalsIgnoreCase(checkFlatToTable)){
		
			  sb.append("@"+start+" "+listTokenFlatToTable.get(2)+"  $"+listTokenFlatToTable.get(1)+".");
			      sb.append("\n");
			
             sbFieldName.append("\t\t\t"+listTokenFlatToTable.get(2)+",");
	       sbFieldName.append("\n");   
	  
	 
	    try 
	        { 
	     int ia =Integer.parseInt(listTokenFlatToTable.get(1).toString());
	      start = start + ia;
      	    }catch(Exception e)
      	    {
      	    	 JOptionPane.showMessageDialog ( objGuiScripterFlatToTable,new 
      	 		 	  String("DML not in Sasco Format "+e));  
      	   
      	    
      	    } 


     }
	   else {
		   
		   
		     sbFieldName.append("\t\t\t"+listTokenFlatToTable.get(2)+",");
		       sbFieldName.append("\n"); 
		 	   
	        sb.append("@"+start+" "+listTokenFlatToTable.get(2)+"  "+listTokenFlatToTable.get(1)+".");
		   sb.append("\n");
				  
		      try {
		    	 
		   	  String test =listTokenFlatToTable.get(0).toString();
		 		     if(test.equalsIgnoreCase("DATE"))
		             {
		       int ib=listTokenFlatToTable.get(1).toString().length();
		        start =start +ib;
		              }
		     else {
		      int ia =Integer.parseInt(listTokenFlatToTable.get(1).toString());
			
				      start = start + ia;	  
					    	  
		    	  }
		         
		         }catch(Exception e)
		         {
		        	 JOptionPane.showMessageDialog ( objGuiScripterFlatToTable,new 
		       		 	  String("Dml not in Sasco format"+e));     	 
		         
		         }
				



 }
  
	   listTokenFlatToTable.clear();   
      }
		
			 dmlFormatFlatToTable =sb.toString();
		     fieldNames =sbFieldName.toString();  
	  		
		     //closing files
		     readerFlatToTable.close();
		 
		 }catch(Exception e)
		  {
			  
			  JOptionPane.showMessageDialog (objGuiScripterFlatToTable,new 
		            	 String("Dml not in sasco format "));    
		  }	
		    File f1 = new File("temp1.txt");
		    boolean success = f1.delete(); 
		 
		    String con ="libname   "+strSchema+
			 "    db2  database=     user=      password=     schema=" +strSchema+";";
			 
			 String comntCon ="/**Connecting to database:Enter values*/";
			 
			 srtBufCode.append(con);
			 srtBufCode.append("\n");
			 srtBufCode.append(comntCon);
			 srtBufCode.append("\n");
			
			 //creating exoected output code data movin from AIF
			 //creating data code
			 String outPut = "filename summary";
			    String outPutCmnt ="/*enter file path*/";
			    String dataFlatToTable ="data  "+strTableName+"_expected_output;";
			    String dataInputFlatToTable ="infile  summary  Flat='|'  dsd;"+"\n"+"input"+"\n";
			    
			    srtBufCode.append(outPut);
			   srtBufCode.append("\n");
			   srtBufCode.append(outPutCmnt);
			   srtBufCode.append("\n");
			   srtBufCode.append(dataFlatToTable);
			    srtBufCode.append("\n");
			    srtBufCode.append("\n");
			    srtBufCode.append(dataInputFlatToTable);
			    srtBufCode.append(dmlFormatFlatToTable);
			    srtBufCode.append("\n"+";");
			    srtBufCode.append("\nrun;");
			    srtBufCode.append("\n");
			    srtBufCode.append("\n"); 
		  
			   // writing proc sql
			    String fileTableToFlat ="create  table "+strTableName+"_expected_table as (";
			    String fileSqlTableToFlat ="select  *  from "+strTableName+"_expected_output );";
			    
			    srtBufCode.append(fileTableToFlat);
			    srtBufCode.append("\n");
			    srtBufCode.append(fileSqlTableToFlat);
			    srtBufCode.append("\n\n");
			    srtBufCode.append("quit;\n"); 
			    
			 //writing code for actual output
			    
           // creating  proc sql;
			String strProcFlatToTable = "proc sql ;";
			srtBufCode.append(strProcFlatToTable);
			srtBufCode.append("\n");
			 
			 //creating actual output table
			 String strCreate = "Create table  "+ strTableName+"_actual_Output as (";
			 
		    srtBufCode.append(strCreate);
		   srtBufCode.append("\nselect\n"); 
		   
		   //creating list of  field names
		    srtBufCode.append(fieldNames);
		    srtBufCode.append("\n");
		    //ending proc sql statement
		    String endSqlTableToFlat =" from "+strSchema+"."+strTableName+");";
		    
		    srtBufCode.append(endSqlTableToFlat);
		    srtBufCode.append("\n\n");
		    srtBufCode.append("quit;\n");
		    // proc priting
		    
		    String procPrintFlatAifToTable ="proc print  data= "+strTableName+"_actual_Output ;"; 
		    String procPrintTableToFlatTable ="proc print  data= "+strTableName+"_expected_table ;";
		    srtBufCode.append(procPrintFlatAifToTable);
		    srtBufCode.append("\n");
		    srtBufCode.append(procPrintTableToFlatTable);
		    srtBufCode.append("\n");   
		    String codeFlatToTable =srtBufCode.toString();
			//System.out.println(codeTableToFlat );
		 
			
		    objGuiScripterFlatToTable.setVisible(false);
			GuiSasco objGuiSasco = new GuiSasco ("Java-SAS Editor");
			objGuiSasco.txtAreaSasEditor.setText(codeFlatToTable);
	   }
	 
 
 }




}
}