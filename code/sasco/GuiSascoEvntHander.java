/**
 * This source file contains a class to 
 * handle events generated by GuiSasco.It contains 
 * a method actionperformed to handle events 
 */
package sasco;

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 import java.awt.datatransfer.*;
 import java.io.*;
import java.util.*;
/**
 * This class contains method to handle events
 * generated by oject of class GuiSasco .It implements 
 * Action Listener Interface
 * @author Pulkit Saxena
 * @version 1.0
 */
 class GuiSascoEvntHander implements ActionListener  {
  
	 GuiSasco objGuiSascoEvnt;
	 static Clipboard clipboard ;
	 /*
	  * this constructor initiales object  of
	  * GuiSascoEvntHander
	  */
	 public GuiSascoEvntHander(GuiSasco objGuiSascoEvnt)
	 {
	 this.objGuiSascoEvnt = objGuiSascoEvnt;
	 }

    /*
     * This method handles the event generated by the
     * object of GuiSasco
     * @return void
     * @param ae -ActionEvent ae
     */

	 public void actionPerformed(ActionEvent ae)
	 {
		 //to recognise who created event
		 String arg=(String)ae.getActionCommand();
	  
		 //event handled for menu item New
	 if(arg.equals("New"))
	    {
			 GuiSasco objNewGuiSasco = new GuiSasco("Java-SAS Editor");
	    }
	 
		 //event handled for menu item Open
   	 else if(arg.equals("Open"))
	 {
			 
		try
		{
	    //creating File Dialog	
		JFileChooser openFileDialog = new JFileChooser();	 
		int returnVal =
			openFileDialog.showOpenDialog(this.objGuiSascoEvnt);
		
        //creating filereader object to reda the file
       FileReader fileReader = new FileReader(openFileDialog.getSelectedFile());
       
       //getting file name and path 
       File file = openFileDialog.getSelectedFile();  
		String  strTitlePath = file.getAbsolutePath();
        //setting the title of Sasco
		objGuiSascoEvnt.setTitle(strTitlePath);	 
		
		//reading file and displaying text in editor
        BufferedReader br =new BufferedReader(fileReader);
            String s =" ";
            StringBuffer sb = new StringBuffer();
           while((s= br.readLine())!=null)
             {                      
            sb=  sb.append(s);
             sb.append("\r\n"); 
             }
         s =sb.toString();
         //displaying text
         objGuiSascoEvnt.txtAreaSasEditor.setText(s);
         fileReader.close();
        }catch(IOException e)
           {
          JOptionPane.showMessageDialog ( objGuiSascoEvnt,new 
    	  String("Can not open the file "+e)); 	  
    	  System.out.println(e); 
           }  
       	 
	   }
			 
   	 //event handled for menu item Save
   	 else if(arg.equals("Save"))
   	 {	 
   	   String str3 = objGuiSascoEvnt.getTitle();
       
   	   if(str3.equals("Java-SAS Editor"))
        {
         try
           { 
         FileDialog fd =new FileDialog(this.objGuiSascoEvnt,"save_ur_code");
         fd.setVisible(true);
         //check for cancel operation
         String strCancel = fd.getDirectory();
         if(strCancel==null)
         {
        	 ;
         }
         else {
         String str =fd.getDirectory()+fd.getFile();
          
          objGuiSascoEvnt.setTitle(str);
         String str2 =  objGuiSascoEvnt.txtAreaSasEditor.getText();
         FileWriter f = new FileWriter(str);
         f.write(str2);
         f.close();
         }
           }catch(IOException e)
          { 
            JOptionPane.showMessageDialog ( objGuiSascoEvnt,new 
            String("Can not save the file "+e)); 	  
           	System.out.println(e); 
          }
     
         }
       

       else
         {
          try
           { 
        FileWriter f = new FileWriter(str3);
        String str2 = objGuiSascoEvnt.txtAreaSasEditor.getText();
        f.write(str2);
        f.close();  
         }catch(IOException e)
          {
        	 JOptionPane.showMessageDialog ( objGuiSascoEvnt,new 
        	            String("Can not save the file "+e));
        	 System.out.println(e);
           }
   
         }
     
         
     }
 
   	 //event handled for menu item Save As
   	 else if(arg.equals("Save As"))
   	 {

         try
           { 
             FileDialog fd =new FileDialog(this.objGuiSascoEvnt,"save_ur_code");
             fd.setVisible(true);
             String strCancel =fd.getDirectory();
             //checking if Save operation is cancelled
             if(strCancel==null) 
             { 
            	 ;
             }
             else {
             String str =fd.getDirectory()+fd.getFile();
                          
             objGuiSascoEvnt.setTitle(str);
             String str2 = objGuiSascoEvnt.txtAreaSasEditor.getText();
             FileWriter f = new FileWriter(str);
             f.write(str2);
             f.close();
             }
              }catch(IOException e)
                   { 
            	JOptionPane.showMessageDialog ( objGuiSascoEvnt,new 
                        String("Can not save the file "+e));      
            	System.out.println(e); 
                   }
   	    }
	 
   	 //event handled for menu item Exit
   	 else if(arg.equals("Exit"))
   	 {
	  System.exit(0);
   	 	 
   	 }
   	 
	 //event handled for menu item Cut
   	 else if(arg.equals("Cut"))
   	 {		 
   		//writing data to clipboard
   		 Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
   	    String text = objGuiSascoEvnt.txtAreaSasEditor.getSelectedText();
   	    String s = objGuiSascoEvnt.txtAreaSasEditor.getText().replace(text,"");
   	    objGuiSascoEvnt.txtAreaSasEditor.setText(s);  
   	    if(text==null) text =objGuiSascoEvnt.txtAreaSasEditor.getText();
   	    StringSelection selection = new StringSelection(text);
   	    clipboard.setContents(selection,null);
   	   }    		 
   	 
   	 //event handled for menu item Copy
   	 else if(arg.equals("Copy"))
   	 {

         Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
         String text = objGuiSascoEvnt.txtAreaSasEditor.getSelectedText();
         if(text==null) text =objGuiSascoEvnt.txtAreaSasEditor.getText();
         StringSelection selection = new StringSelection(text);
        clipboard.setContents(selection,null);
       
   	 }
   
	 //evemt handled for menu tem Paste
   	 else if(arg.equals("Paste"))
   	 {
   		//reading clipboard
   		 Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        DataFlavor flavor = DataFlavor.stringFlavor;
        if(clipboard.isDataFlavorAvailable(flavor))
         {
            try
              {
                //writing from clipboard to textarea
            	String text =(String)clipboard.getData(flavor);               
               objGuiSascoEvnt.txtAreaSasEditor.append(text);
               
              }catch(UnsupportedFlavorException e)
                {
            	  //handling exceptions
             JOptionPane.showMessageDialog ( objGuiSascoEvnt,new 
                     String("Can not paste "+e));
             System.out.println(e);
               }
             catch(IOException e)
                {
            	 //handling exceptions
            	 JOptionPane.showMessageDialog ( objGuiSascoEvnt,new 
            	 String("Can not paste "+e));	 
                }
             }
          }   

   	 //event handled for menu item Delimited File 
   	 else if(arg.equals("Delimited File")){
   		
   		 GuiConvertDml objGuiConvertDml = new GuiConvertDml("Convert DML to SAS format For Delimited AIF");
   	 }

	//event handled for menu item  convertDmlFlatFile 
   	
	  else if (arg.equals("Flat File")){
   		 
   	 GuiConverDmlFlat objGuiConverDmlFlat = new GuiConverDmlFlat("Convert DML to SAS format Flat AIF");
   	 }
	 
	 //event handled for menu item Table to DLM_File
   	 else if(arg.equals("Table to DLM_File")){
   		 
   		objGuiSascoEvnt.setVisible(false);
   		 GuiScripterTbleToDlm  objGuiScripterTbleToDlm =
   		 new GuiScripterTbleToDlm("Generating code for Table to DLM_File");
   		 
   	 }
 
   	 else if(arg.equals("DLM_File to Table")){
   		objGuiSascoEvnt.setVisible(false);
      
   		  GuiScripterDlmToTable  objGuiScripterDlmToTable =
   			new  GuiScripterDlmToTable ("Generating code for DLM_File to Table");
   	 
   	 }
	 
   	 else if(arg.equals("DLM_File to DLM_File")){
   		 
   		objGuiSascoEvnt.setVisible(false);
   		GuiScripterDlmToDlm objGuiScripterDlmToDlm =
   			new GuiScripterDlmToDlm("Generating code for DLM_File to DLM_File");
   	 }
   	 else if(arg.equals("Table to Flat_File")){
   		objGuiSascoEvnt.setVisible(false);
   		GuiScripterTbleToFlat objGuiScripterTbleToFlat =
   			new GuiScripterTbleToFlat("Generating code for Table to Flat_File");
   	 }
	
   	 else if(arg.equals("Flat_File to Table")){
   		objGuiSascoEvnt.setVisible(false);
   		GuiScripterFlatToTable objGuiScripterFlatToTable =
   			 new GuiScripterFlatToTable("Generating code for Flat_File to Table ");
   	 }

   	 else if(arg.equals("Flat_File to Flat_File")){
   		objGuiSascoEvnt.setVisible(false);
   		GuiScripterFlatToFlat objGuiScripterFlatToFlat =
   			new GuiScripterFlatToFlat("Generating code for Flat_File to Flat_File");
   	 
   	 }
	
   	 else if(arg.equals("SAS Reference")){
   		 
   	  try {

   		 
   		  //connection to file database.properties
   		Properties props =new Properties();
   		FileInputStream in = new FileInputStream("database.properties");
   		props.load(in);
   		in.close();
       	String sasHtmlPath = props.getProperty("create.path");
   	    //invoking native method
   		String cmd ="cmd.exe /c start ";
   		Runtime.getRuntime().exec(cmd+sasHtmlPath);
   		
   	  }catch(IOException e)
   	              {
   		 JOptionPane.showMessageDialog (objGuiSascoEvnt,new 
		    	  String("File not found /Browser nor found "+e)); 	  
		     	  	   		  
   		  
   	              }
   		 
   	 		 
   		 
   	
   	     }
  
   	 else if(arg.equals("About Sasco 1.1")){
   	   
   		 try {
   		String cmd ="cmd.exe /c start ";
   				 
   	    String sAboutSas ="Sasco.pdf";
   	  //invoking native method
   	    Runtime.getRuntime().exec(cmd+sAboutSas);
   	  
   		 }catch(IOException e) 
   		 {
   			 JOptionPane.showMessageDialog (objGuiSascoEvnt,new 
   		    	  String("File not found /PDF Reader nor found "+e)); 	  
   		 }	  
   	 
   	   }
	 
	 
	 }		 
 
}