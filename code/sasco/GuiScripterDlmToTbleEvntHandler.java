/**
 * This java file consists a class which handles the 
 * event generated by the objetc of class GuiScripterDlmToTble
 * and genertes the code for the case when data is moving from 
 * AIF to Table .
 */
package sasco;
import java.awt.event.*;
import javax.swing.JOptionPane;
import java.util.StringTokenizer.*;
import java.io.*;
import java.util.*;

/**
 * This class implements ActionListener interface and 
 * implements the actionPerformed method to handle the 
 * button click event genereated by the object of
 * class  GuiScripterDlmToTble
 * @author Pulkit Saxena
 * @version 1.0
 * Date 1-Jul-2007
 */
class GuiScripterDlmToTbleEvntHandler implements ActionListener {

	GuiScripterDlmToTable objGuiScripterDlmToTble;
	StringBuffer srtBufCode ;
	String strSchema;
	String strTableName;
	String strTableDml;
	ArrayList listTokenDlmToTble ;
	FileWriter writerDlmToTble;
	FileReader readerDlmToTble;
public	StringBuffer sb;
public	StringBuffer sbFieldName;
public  String  dmlFormatDlmToTble;
public  String  fieldNames;

/**
 * This is constructor for the class and
 *  initiales the variables.
 * @param objGuiScripterDlmToTble
 */

public GuiScripterDlmToTbleEvntHandler(GuiScripterDlmToTable objGuiScripterDlmToTble){
	this.objGuiScripterDlmToTble=objGuiScripterDlmToTble;
  	srtBufCode = new StringBuffer();
  	listTokenDlmToTble = new ArrayList();	

  	JOptionPane.showMessageDialog ( objGuiScripterDlmToTble,new 
		 	  String("Enter DML in Sasco format" +"\n"+
		 	  		"for exapmle" +"\n"+
		 	  		"string(1)     goldcard_ind;"+"\n"+
"string(1)     par_non_par_ind;"+"\n"+
"decimal(20)   provider_id; "));  


}

/**
 * This method handles the event and genertaes the code
 * @param ae the oject for ActionEvent
 */
public void actionPerformed(ActionEvent ae){
	 String arg=(String)ae.getActionCommand();
	 //to recognise who created the event
	 if(arg.equals("Generate Code")){
		 
	 String strToken;
	//creating code for connection to database
		   
	 strSchema = objGuiScripterDlmToTble.txtTrgtSchema.getText();
	 strTableName = 
		 objGuiScripterDlmToTble.trgtTableName.getText();
	 
	 strTableDml = 
		 objGuiScripterDlmToTble.txtAreaSrcDmlAif.getText();
	 
	 //removig extra lines 
	 String strTableDmlTrim =strTableDml.trim();
	 
	 if(strSchema.equals("")||strTableName.equals("")||
			 strTableDml.equals(""))
	 {
		 JOptionPane.showMessageDialog (objGuiScripterDlmToTble,new 
            	 String("enter all values dml/table schema/table name "));  
    
	 }
	 else {
		
		 try{
			
         // writing dml to temporary file
		    writerDlmToTble = new FileWriter("temp1.txt");
		   
		  // writerDlmToTble.write(strTableDml);
		    writerDlmToTble.write(strTableDmlTrim);
		    writerDlmToTble.close(); 
			
       //reading from temporary file
		
		    readerDlmToTble = new FileReader("temp1.txt");
			BufferedReader br =new BufferedReader(readerDlmToTble);
			
			//for reading from file
			String strTbleToDlm =" ";    
			
			//for generating SAS format dml code
			sb = new StringBuffer();
			
			//for geeratig fields name
			sbFieldName  = new  StringBuffer();
           //reading file
			while((strTbleToDlm = br.readLine())!=null){
				
			
	//scanning for tokens 
	  java.util.StringTokenizer scanDlmToDlm =
		new java.util.StringTokenizer(strTbleToDlm," \t+()\t+;\n");	
//	scanning started
	    while(scanDlmToDlm.hasMoreTokens())
	     {   
     	String trimmerDlmToTble =  scanDlmToDlm.nextToken();
	    //removing any white spaces
     	
     	trimmerDlmToTble =trimmerDlmToTble.trim();
	   listTokenDlmToTble.add(trimmerDlmToTble); 
		  }
	 	
	    String   strTokenDlmToTble = listTokenDlmToTble.get(0).toString();
	    String checkTokenDlmToTble=strTokenDlmToTble.trim(); 
	   
	   String checkDlmToTble ="string";    
	
	   if(checkTokenDlmToTble.equalsIgnoreCase(checkDlmToTble)){
		
		   sb.append(listTokenDlmToTble.get(2)+"  :$"+listTokenDlmToTble.get(1)+".");
	       sb.append("\n");
	       sbFieldName.append("\t\t\t"+listTokenDlmToTble.get(2)+",");
	       sbFieldName.append("\n");   
	  
	   }
	   else {
		   
		   sb.append(listTokenDlmToTble.get(2)+"  :"+listTokenDlmToTble.get(1)+".");
		     sb.append("\n");
		     sbFieldName.append("\t\t\t"+listTokenDlmToTble.get(2)+",");
		       sbFieldName.append("\n"); 
		 	   
	       }
  
	   listTokenDlmToTble.clear();   
      }
		
			 dmlFormatDlmToTble =sb.toString();
		     fieldNames =sbFieldName.toString();  
	  		
		     //closing files
		     readerDlmToTble.close();
		 
		 }catch(Exception e)
		  {
			  
			  JOptionPane.showMessageDialog (objGuiScripterDlmToTble,new 
		            	 String("Dml not in sasco format "));    
		  }	
		    File f1 = new File("temp1.txt");
		    boolean success = f1.delete(); 
		 
		    String con ="libname   "+strSchema+
			 "    db2  database=     user=      password=     schema=" +strSchema+";";
			 
			 String comntCon ="/**Connecting to database:Enter values*/";
			 
			 srtBufCode.append(con);
			 srtBufCode.append("\n");
			 srtBufCode.append(comntCon);
			 srtBufCode.append("\n");
			
			 //creating exoected output code data movin from AIF
			 //creating data code
			 String outPut = "filename summary";
			    String outPutCmnt ="/*enter file path*/";
			    String dataDlmToTble ="data  "+strTableName+"_expected_output;";
			    String dataInputDlmToTble ="infile  summary  dlm='|'  dsd;"+"\n"+"input"+"\n";
			    
			    srtBufCode.append(outPut);
			   srtBufCode.append("\n");
			   srtBufCode.append(outPutCmnt);
			   srtBufCode.append("\n");
			   srtBufCode.append(dataDlmToTble);
			    srtBufCode.append("\n");
			    srtBufCode.append("\n");
			    srtBufCode.append(dataInputDlmToTble);
			    srtBufCode.append(dmlFormatDlmToTble);
			    srtBufCode.append("\n"+";");
			    srtBufCode.append("\nrun;");
			    srtBufCode.append("\n");
			    srtBufCode.append("\n"); 
		  
			   // writing proc sql
			    String fileTbleToDlm ="create  table "+strTableName+"_expected_table as (";
			    String fileSqlTbleToDlm ="select  *  from "+strTableName+"_expected_output );";
			    
			    srtBufCode.append(fileTbleToDlm);
			    srtBufCode.append("\n");
			    srtBufCode.append(fileSqlTbleToDlm);
			    srtBufCode.append("\n\n");
			    srtBufCode.append("quit;\n"); 
			    
			 //writing code for actual output
			    
           // creating  proc sql;
			String strProcDlmToTble = "proc sql ;";
			srtBufCode.append(strProcDlmToTble);
			srtBufCode.append("\n");
			 
			 //creating actual output table
			 String strCreate = "Create table  "+ strTableName+"_actual_Output as (";
			 
		    srtBufCode.append(strCreate);
		   srtBufCode.append("\nselect\n"); 
		   
		   //creating list of  field names
		    srtBufCode.append(fieldNames);
		    srtBufCode.append("\n");
		    //ending proc sql statement
		    String endSqlTbleToDlm =" from "+strSchema+"."+strTableName+");";
		    
		    srtBufCode.append(endSqlTbleToDlm);
		    srtBufCode.append("\n\n");
		    srtBufCode.append("quit;\n");
		    // proc priting
		    
		    String procPrintDlmAifToTble ="proc print  data= "+strTableName+"_actual_Output ;"; 
		    String procPrintTbleToDlmTble ="proc print  data= "+strTableName+"_expected_table ;";
		    srtBufCode.append(procPrintDlmAifToTble);
		    srtBufCode.append("\n");
		    srtBufCode.append(procPrintTbleToDlmTble);
		    srtBufCode.append("\n");   
		    String codeDlmToTble =srtBufCode.toString();
			//System.out.println(codeTbleToDlm );
		 
			
		    objGuiScripterDlmToTble.setVisible(false);
			GuiSasco objGuiSasco = new GuiSasco ("Java-SAS Editor");
			objGuiSasco.txtAreaSasEditor.setText(codeDlmToTble);
	   }
	 
 
 }




}

}
